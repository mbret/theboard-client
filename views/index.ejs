<!DOCTYPE html>
<html ng-app="app">
  <head>
    <title>Board</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

      <!-- Latest compiled and minified CSS -->
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">

      <!-- Angulars Material CSS -->
      <link rel="stylesheet" href="//rawgit.com/angular/bower-material/master/angular-material.css">

      <!-- Optional theme -->
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap-theme.min.css">

      <link rel="stylesheet" href="https://rawgit.com/ManifestWebDesign/angular-gridster/master/dist/angular-gridster.min.css">

    <!--STYLES-->
    <link rel="stylesheet" href="/app/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/app/css/bootstrap.min.css">
    <link rel="stylesheet" href="/app/css/main.css">
    <!--STYLES END-->
  </head>

  <body ng-sctyle="bodyStyle">



      <div class="view-container">
        <div ng-view class="view-frame"></div>
      </div>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

        <!--TEMPLATES-->
        
        <!--TEMPLATES END-->


        <!--

          Client-side Javascript
          ========================

          You can always bring in JS files manually with `script` tags, or asynchronously
          on the client using a solution like AMD (RequireJS).  Or, if you like, you can
          take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

          By default, files in your `assets/js` folder are included here
          automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
          CoffeeScript (.coffee) are supported. In production, your scripts will be minified
          and concatenated into a single file.

          To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
          For example, here are a few things you could do:

              + Change the order of your scripts
              + Import scripts from other directories
              + Use a different preprocessor, like TypeScript

        -->

        <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
        <script src="https://code.angularjs.org/1.3.7/angular.js"></script>
        <script src="https://code.angularjs.org/1.3.7/angular-route.js"></script>
        <script src="https://code.angularjs.org/1.3.7/angular-animate.js"></script>
        <script src="https://code.angularjs.org/1.3.7/angular-aria.js"></script>

        <!-- Hammer + angular -->
        <script src="http://hammerjs.github.io/dist/hammer.js"></script>
        <!--<script src="https://raw.githubusercontent.com/monospaced/angular-hammer/master/angular-hammer.js"></script>-->

        <!-- Gridster + angular -->
        <script src="https://cdn.rawgit.com/sdecima/javascript-detect-element-resize/master/jquery.resize.js"></script>
        <script src="https://rawgit.com/ManifestWebDesign/angular-gridster/master/src/angular-gridster.js"></script>

        <!-- Material design -->
        <script src="//rawgit.com/angular/bower-material/master/angular-material.js"></script>

        <!-- Load application config -->
        <script src="settings.js"></script>

        <!--SCRIPTS-->
        <script src="/app/js/dependencies/sails.io.js"></script>
        <script src="/app/js/dependencies/URI.js"></script>
        <script src="/app/js/app.module.js"></script>
        <script src="/app/js/controllers.js"></script>
        <script src="/app/js/directives.js"></script>
        <script src="/app/js/filters.js"></script>
        <script src="/app/js/services.js"></script>
        <!--SCRIPTS END-->
  </body>
</html>
